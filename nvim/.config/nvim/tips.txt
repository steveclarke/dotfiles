3>> - indent n lines
dj - delete down
gM/gm - move to the middle of current line/screenwidth
X - delete character before cursor
H,M,L - move to top, middle, bottom of screen
>} - indent to end of paragraph
{ - move to beginning of paragraph
dG - delete to end of file
dgg - delete to beginning of file
d} - delete to end of paragraph
d% - delete to matching parenthesis
ZZ - equivalent to :wq
:x - equivalent to :wq
gv - reselect last visual selection
:tabnew % - open current file in new tab
* - search for word under cursor
gt/gT - next/previous tab
:only,:tabonly - close all but current window, tab
:right - align current line to right
<C-{h,w,u}> in Insert mode - delete previous character, word, line
<C-r>{register} in Insert mode - insert contents of register
in Visual mode, press 'o' to go to the other end of highlighted text
:$ - move to end of file
In command mode, <C-v>[ESC] inserts a literal escape character
@: - repeat last command
@@ - repeat last macro
<C-r><C-w> - insert word under cursor
q:, q/ - command-line window
<C-f> in command line to open in window
:read !{cmd} - insert output of command
:argdo, :bufdo, :cdo execute commands across all arglist, buffers, quickfix list
yss, ySS - surround current line with something
dst - delete surrounding tag
ysiwf - surround inner word with function
surround t, f, i - surround tag, function, insert (custom left/right)
<C-g> - in normal mode, show file info
:ls, :args - list buffers, arguments
:lcd %:h - change working directory to current file's directory
gP - copy block of text down
xp - transpose characters
"_ - black hole register
"0 - yank register (only yanked text gets placed here)
"A - append to 'a' register
"= - expression register
When changing text in visual mode, the modified text is placed in the unnamed register
g[u,U,~]{motion} - uppercase text
:normal @a - execute macro a once for each line in the selection
:new, :vnew - open new window
qA - append to macro a
:edit! - reload file, discarding changes
:wall - write all buffers
:wnext - same as :write, :next
<C-r>=i<CR> - insert result of expression, 77i.e. contents of "let i=1"
:put a - put contents of register a below current line
Edit a macro by pasting the contents of the register, editing, then yanking back into the register
/\Cfoo - force case-sensitive search
{operator}gn - search the last used search pattern and visually select it. e.g. `cgn`
\v - very magic, e.g. /\vfoo|bar. Makes regexes more like ruby.
\V - very nomagic, e.g. /\Vfoo|bar. search for text vebatim/literally.
/<CR> - repeat last search
/foo/e - move to end of match. :h search-offset for more info
/foo/+1 - move to first line after match
:%s///gn - count number of matches
:vimgrep //g % - count number of matches. Uses quickfix list.
:vimgrep // **/* - search all files in current directory for last search pattern
:helpgrep - search help files. Uses quickfix list (i.e. :cnext, :cprev)
<C-r>/ - insert contents of search register
In replacement field \= evaluates an expression. e.g. :%s/foo/\=@0
g& - repeat last substitution
g~{motion} - toggle case of {motion} text
g~~ - toggle case of current line
/utils\ze.core - match utils in "utils.core", but only up to .core
:global /foo - execute command on all lines that match pattern. default {cmd} is :print
qaq - clear register a
vi( - select contents of parentheses
:.+1,/}/-1 sort - sort from current line +1 to line before next closing brace
:colder - view a previous quickfix list
:vim foo.bar +10 - open file foo.bar at line 10
!{motion} - (from normal mode) filter {motion} through external command (e.g. !3j jq)
<C-x><C-p> - repeat sequence in insert mode to sequentially complete words
<C-x><C-l> - complete line (insert mode)
4_ - move down 4 lines to first non-blank character. No count given = move to first non-blank character
yssf - surround current line with function
