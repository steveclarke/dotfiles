#!/usr/bin/env bash
#
# Script Name: dotfiles
# Description: Utility script for managing dotfiles installation and updates
# Platform: cross-platform
# Dependencies: .dotfilesrc, stow, brew (macOS), platform-specific libraries
#

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Source required libraries
source "${HOME}"/.dotfilesrc
source "${DOTFILES_DIR}"/lib/dotfiles.sh

# Detect OS
detect_os

# Source platform-specific libraries
if is_macos; then
    source "${DOTFILES_DIR}"/lib/macos.sh
elif is_linux; then
    source "${DOTFILES_DIR}"/lib/linux.sh
fi

show_help() {
  echo "üîß Dotfiles Management Utility"
  echo ""
  echo "Usage: dotfiles [command] [options]"
  echo ""
  echo "Commands:"
  echo "  install [platform]  - Run full installation (linux/macos, auto-detects if not specified)"
  echo "  config             - Update configuration files using stow"
  echo "  stow               - Alias for config command"
  echo "  brew               - Install/update packages using Homebrew"
  echo "  update             - Update both config and packages"
  echo "  doctor             - Check system health and dependencies"
  echo "  clean              - Clean up temporary files and caches"
  echo "  help               - Show this help message"
  echo ""
  echo "Examples:"
  echo "  dotfiles install          # Install for current platform"
  echo "  dotfiles install linux    # Force Linux installation"
  echo "  dotfiles config           # Update config files"
  echo "  dotfiles doctor           # Check system health"
  echo "  dotfiles clean            # Clean temporary files"
  echo ""
  echo "Environment Variables:"
  echo "  DOTFILES_INSTALL_GUI     - Set to 'TRUE' for GUI applications (Linux only)"
  echo "  DOTFILES_DIR             - Path to dotfiles directory"
}

# Show usage if no command is provided
if [ $# -eq 0 ]; then
  show_help
  exit 1
fi

run_install() {
  local platform="${1:-auto}"
  
  if [[ "$platform" == "auto" ]]; then
    if is_macos; then
      platform="macos"
    elif is_linux; then
      platform="linux"
    else
      echo "‚ùå Unable to detect platform. Please specify: linux or macos"
      exit 1
    fi
  fi
  
  case "$platform" in
    linux)
      if ! is_linux; then
        echo "‚ùå Cannot install Linux dotfiles on non-Linux system"
        exit 1
      fi
      echo "üêß Starting Linux installation..."
      source "${DOTFILES_DIR}"/install.sh
      ;;
    macos)
      if ! is_macos; then
        echo "‚ùå Cannot install macOS dotfiles on non-macOS system"
        exit 1
      fi
      echo "üçé Starting macOS installation..."
      source "${DOTFILES_DIR}"/install.sh
      ;;
    *)
      echo "‚ùå Invalid platform: $platform"
      echo "Supported platforms: linux, macos"
      exit 1
      ;;
  esac
}

run_config() {
  echo "‚öôÔ∏è  Updating configuration files..."
  source "${DOTFILES_DIR}"/configs/stow.sh
  echo "‚úÖ Configuration files updated!"
}

run_brew() {
  if is_macos; then
    echo "üç∫ Running brew bundle (macOS)"
    
    # Cache sudo credentials for packages that may require it
    cache_sudo_credentials
    
    cd "${DOTFILES_DIR}" || exit
    
    # Always run main Brewfile for CLI tools
    if [[ -f "${DOTFILES_DIR}/Brewfile" ]]; then
      echo "üì¶ Installing CLI packages from main Brewfile"
      brew bundle --file=Brewfile
    fi
    
    # Run macOS-specific Brewfile if it exists
    if [[ -f "${DOTFILES_DIR}/Brewfile.macos" ]]; then
      echo "üçé Installing macOS packages from Brewfile.macos"
      brew bundle --file="${DOTFILES_DIR}/Brewfile.macos"
    fi
    
    cd - || exit
  else
    echo "üç∫ Running brew bundle (Linux)"
    cd "${DOTFILES_DIR}" || exit
    brew bundle
    cd - || exit
  fi
  echo "‚úÖ Package installation complete!"
}

run_update() {
  echo "üîÑ Updating dotfiles..."
  run_config
  run_brew
  echo "‚úÖ Update complete!"
}

run_doctor() {
  echo "ü©∫ Running system health check..."
  echo ""
  
  local issues=0
  
  # Check dotfiles directory
  if [[ ! -d "$DOTFILES_DIR" ]]; then
    echo "‚ùå DOTFILES_DIR not found: $DOTFILES_DIR"
    ((issues++))
  else
    echo "‚úÖ DOTFILES_DIR exists: $DOTFILES_DIR"
  fi
  
  # Check .dotfilesrc
  if [[ ! -f "${HOME}/.dotfilesrc" ]]; then
    echo "‚ùå .dotfilesrc not found in home directory"
    ((issues++))
  else
    echo "‚úÖ .dotfilesrc found"
  fi
  
  # Check stow installation
  if is_installed stow; then
    echo "‚úÖ stow is installed"
  else
    echo "‚ùå stow is not installed"
    ((issues++))
  fi
  
  # Check platform-specific tools
  if is_macos; then
    if is_installed brew; then
      echo "‚úÖ Homebrew is installed"
    else
      echo "‚ùå Homebrew is not installed"
      ((issues++))
    fi
  elif is_linux; then
    if is_installed apt; then
      echo "‚úÖ apt package manager is available"
    else
      echo "‚ö†Ô∏è  apt package manager not found (expected on Ubuntu/Debian)"
    fi
    
    if is_installed snap; then
      echo "‚úÖ snap package manager is available"
    else
      echo "‚ö†Ô∏è  snap package manager not found"
    fi
  fi
  
  # Check git configuration
  if is_installed git; then
    echo "‚úÖ git is installed"
    if git config --global user.name >/dev/null 2>&1; then
      echo "‚úÖ git user.name is configured"
    else
      echo "‚ö†Ô∏è  git user.name not configured"
    fi
    if git config --global user.email >/dev/null 2>&1; then
      echo "‚úÖ git user.email is configured"
    else
      echo "‚ö†Ô∏è  git user.email not configured"
    fi
  else
    echo "‚ùå git is not installed"
    ((issues++))
  fi
  
  # Check shell
  if [[ "$SHELL" == *"fish"* ]]; then
    echo "‚úÖ fish shell is set as default"
  else
    echo "‚ö†Ô∏è  fish shell is not set as default (current: $SHELL)"
  fi
  
  echo ""
  if [[ $issues -eq 0 ]]; then
    echo "üéâ System health check passed! No critical issues found."
  else
    echo "‚ö†Ô∏è  Found $issues critical issue(s). Consider running 'dotfiles install' to fix."
  fi
  
  echo ""
  echo "üí° Tip: Run 'dotfiles install' to install missing dependencies"
  echo "üí° Tip: Run 'dotfiles config' to update configuration files"
}

run_clean() {
  echo "üßπ Cleaning temporary files and caches..."
  
  local cleaned=0
  
  # Clean common temporary directories
  for dir in "${HOME}/.cache/dotfiles" "${DOTFILES_DIR}/.tmp" "${DOTFILES_DIR}/tmp"; do
    if [[ -d "$dir" ]]; then
      echo "üóëÔ∏è  Removing $dir"
      rm -rf "$dir"
      ((cleaned++))
    fi
  done
  
  # Clean common temporary files
  for file in "${DOTFILES_DIR}/.install-state" "${DOTFILES_DIR}/install.log" "${HOME}/.dotfiles-install.log"; do
    if [[ -f "$file" ]]; then
      echo "üóëÔ∏è  Removing $file"
      rm -f "$file"
      ((cleaned++))
    fi
  done
  
  # Clean Homebrew cache if on macOS
  if is_macos && is_installed brew; then
    echo "üç∫ Cleaning Homebrew cache..."
    brew cleanup
    ((cleaned++))
  fi
  
  # Clean apt cache if on Linux
  if is_linux && is_installed apt; then
    echo "üì¶ Cleaning apt cache..."
    sudo apt autoremove -y
    sudo apt autoclean
    ((cleaned++))
  fi
  
  echo ""
  if [[ $cleaned -eq 0 ]]; then
    echo "‚ú® No temporary files found to clean"
  else
    echo "‚úÖ Cleaned $cleaned item(s)"
  fi
  
  echo "üí° Tip: Run 'dotfiles doctor' to check system health"
}

# Check the command and run appropriate function
case "${1:-help}" in
  install)
    run_install "${2:-auto}"
    ;;
  config|stow)
    run_config
    ;;
  brew)
    run_brew
    ;;
  update)
    run_update
    ;;
  doctor)
    run_doctor
    ;;
  clean)
    run_clean
    ;;
  help|--help|-h)
    show_help
    ;;
  *)
    echo "‚ùå Invalid command: $1"
    echo ""
    show_help
    exit 1
    ;;
esac
