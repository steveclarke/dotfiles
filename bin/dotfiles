#!/usr/bin/env bash
#
# Script Name: dotfiles
# Description: Utility script for managing dotfiles installation and updates
# Platform: cross-platform
# Dependencies: .dotfilesrc, stow, brew (macOS), platform-specific libraries
#

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Source required libraries
source "${HOME}"/.dotfilesrc
source "${DOTFILES_DIR}"/lib/dotfiles.sh
source "${DOTFILES_DIR}"/lib/dependencies.sh

# Detect OS
detect_os

# Source platform-specific libraries
if is_macos; then
    source "${DOTFILES_DIR}"/lib/macos.sh
elif is_linux; then
    source "${DOTFILES_DIR}"/lib/linux.sh
fi

# Source command implementations
source "${DOTFILES_DIR}"/lib/commands.sh

show_help() {
  echo "üîß Dotfiles Management Utility"
  echo ""
  echo "Usage: dotfiles [command] [options]"
  echo ""
  echo "Commands:"
  echo "  install [platform]  - Run full installation (linux/macos, auto-detects if not specified)"
  echo "  config             - Update configuration files using stow"
  echo "  stow               - Alias for config command"
  echo "  fonts              - Install fonts (copies on macOS, symlinks on Linux)"
  echo "  brew               - Install/update packages using Homebrew"
  echo "  update             - Update both config and packages"
  echo "  doctor             - Check system health and dependencies"
  echo "  validate           - Run comprehensive system validation"
  echo "  test dependencies  - Test dependency declarations in scripts"
  echo "  test basic         - Simple dependency validation test"
  echo "  clean              - Clean up temporary files and caches"
  echo "  help               - Show this help message"
  echo ""
  echo "Examples:"
  echo "  dotfiles install          # Install for current platform"
  echo "  dotfiles install linux    # Force Linux installation"
  echo "  dotfiles config           # Update config files"
  echo "  dotfiles fonts            # Install fonts"
  echo "  dotfiles doctor           # Check system health"
  echo "  dotfiles validate         # Run comprehensive validation"
  echo "  dotfiles test dependencies # Test all script dependencies"
  echo "  dotfiles test basic       # Quick dependency test"
  echo "  dotfiles clean            # Clean temporary files"
  echo ""
  echo "Environment Variables:"
  echo "  DOTFILES_INSTALL_GUI     - Set to 'TRUE' for GUI applications (Linux only)"
  echo "  DOTFILES_DIR             - Path to dotfiles directory"
}

# Show usage if no command is provided
if [ $# -eq 0 ]; then
  show_help
  exit 1
fi

# Check the command and run appropriate function
case "${1:-help}" in
  install)
    run_install "${2:-auto}"
    ;;
  config|stow)
    run_config
    ;;
  fonts)
    run_fonts
    ;;
  brew)
    run_brew
    ;;
  update)
    run_update
    ;;
  doctor)
    run_doctor
    ;;
  validate)
    run_validate
    ;;
  test)
    case "${2:-}" in
      dependencies|deps)
        run_test_deps
        ;;
      basic|simple)
        run_test_simple
        ;;
      *)
        echo "‚ùå Invalid test command: ${2:-}"
        echo ""
        echo "Available test commands:"
        echo "  dotfiles test dependencies  # Test dependency declarations in scripts"
        echo "  dotfiles test basic         # Simple dependency validation test"
        exit 1
        ;;
    esac
    ;;
  # Backward compatibility aliases
  test-deps)
    echo "‚ö†Ô∏è  Command 'test-deps' is deprecated. Use 'dotfiles test dependencies' instead."
    run_test_deps
    ;;
  test-simple)
    echo "‚ö†Ô∏è  Command 'test-simple' is deprecated. Use 'dotfiles test basic' instead."
    run_test_simple
    ;;
  clean)
    run_clean
    ;;
  help|--help|-h)
    show_help
    ;;
  *)
    echo "‚ùå Invalid command: $1"
    echo ""
    show_help
    exit 1
    ;;
esac
