#!/usr/bin/env bash
#
# Script Name: dotfiles
# Description: Utility script for managing dotfiles installation and updates
# Platform: cross-platform
# Dependencies: .dotfilesrc, stow, brew (macOS), platform-specific libraries
#

# Exit on error, undefined variables, and pipe failures
set -euo pipefail

# Source required libraries
source "${HOME}"/.dotfilesrc
source "${DOTFILES_DIR}"/lib/dotfiles.sh
source "${DOTFILES_DIR}"/lib/dependencies.sh

# Detect OS
detect_os

# Source platform-specific libraries
if is_macos; then
    source "${DOTFILES_DIR}"/lib/macos.sh
elif is_linux; then
    source "${DOTFILES_DIR}"/lib/linux.sh
fi

# Source command implementations
source "${DOTFILES_DIR}"/lib/commands.sh

show_help() {
  echo "üîß Dotfiles Management Utility"
  echo ""
  echo "Usage: dotfiles [command] [options]"
  echo ""
  echo "Commands:"
  echo "  install [platform]  - Run full installation (linux/macos, auto-detects if not specified)"
  echo "  config             - Update configuration files using stow"
  echo "  stow               - Alias for config command"
  echo "  fonts              - Install fonts (copies on macOS, symlinks on Linux)"
  echo "  brew               - Install/update packages using Homebrew"
  echo "  update             - Update both config and packages"
  echo "  doctor             - Check system health and dependencies"
  echo "  validate           - Run comprehensive system validation"
  echo "  test dependencies  - Test dependency declarations in scripts"
  echo "  test basic         - Simple dependency validation test"
  echo "  clean              - Clean up temporary files and caches"
  echo "  help               - Show this help message"
  echo ""
  echo "Logging Commands:"
  echo "  logs               - Show recent log entries"
  echo "  logs tail          - Follow log file in real-time"
  echo "  logs clear         - Clear log file"
  echo "  debug on           - Enable debug mode"
  echo "  debug off          - Disable debug mode"
  echo "  debug status       - Show debug status"
  echo "  log-level [level]  - Set logging level (DEBUG/INFO/WARN/ERROR)"
  echo ""
  echo "Examples:"
  echo "  dotfiles install          # Install for current platform"
  echo "  dotfiles install linux    # Force Linux installation"
  echo "  dotfiles config           # Update config files"
  echo "  dotfiles fonts            # Install fonts"
  echo "  dotfiles doctor           # Check system health"
  echo "  dotfiles validate         # Run comprehensive validation"
  echo "  dotfiles test dependencies # Test all script dependencies"
  echo "  dotfiles test basic       # Quick dependency test"
  echo "  dotfiles clean            # Clean temporary files"
  echo "  dotfiles logs             # Show recent logs"
  echo "  dotfiles logs tail        # Follow logs in real-time"
  echo "  dotfiles debug on         # Enable debug mode"
  echo "  dotfiles log-level DEBUG  # Set debug logging level"
  echo ""
  echo "Environment Variables:"
  echo "  DOTFILES_INSTALL_GUI     - Set to 'TRUE' for GUI applications (Linux only)"
  echo "  DOTFILES_DIR             - Path to dotfiles directory"
  echo "  DOTFILES_DEBUG           - Enable debug mode (0/1)"
  echo "  DOTFILES_LOG_LEVEL       - Set logging level (DEBUG/INFO/WARN/ERROR)"
  echo "  DOTFILES_LOG_FILE        - Set log file path"
}

# Logging command functions
run_logs() {
  local action="${1:-show}"
  
  case "$action" in
    show)
      if [[ -f "$DOTFILES_LOG_FILE" ]]; then
        log_info "Showing recent log entries from: $DOTFILES_LOG_FILE"
        echo "=== Recent Log Entries ==="
        tail -50 "$DOTFILES_LOG_FILE"
      else
        log_warn "No log file found at: $DOTFILES_LOG_FILE"
      fi
      ;;
    tail)
      if [[ -f "$DOTFILES_LOG_FILE" ]]; then
        log_info "Following log file: $DOTFILES_LOG_FILE (Press Ctrl+C to stop)"
        tail -f "$DOTFILES_LOG_FILE"
      else
        log_warn "No log file found at: $DOTFILES_LOG_FILE"
      fi
      ;;
    clear)
      if [[ -f "$DOTFILES_LOG_FILE" ]]; then
        > "$DOTFILES_LOG_FILE"
        log_info "Log file cleared: $DOTFILES_LOG_FILE"
      else
        log_warn "No log file found at: $DOTFILES_LOG_FILE"
      fi
      ;;
    *)
      log_error "Invalid logs command: $action"
      echo "Available logs commands:"
      echo "  dotfiles logs       # Show recent entries"
      echo "  dotfiles logs tail  # Follow log file"
      echo "  dotfiles logs clear # Clear log file"
      exit 1
      ;;
  esac
}

run_debug() {
  local action="${1:-status}"
  
  case "$action" in
    on)
      export DOTFILES_DEBUG=1
      echo "export DOTFILES_DEBUG=1" >> "${HOME}/.dotfilesrc"
      log_success "Debug mode enabled"
      log_info "Debug mode will remain enabled across sessions"
      ;;
    off)
      export DOTFILES_DEBUG=0
      # Remove debug setting from .dotfilesrc
      if [[ -f "${HOME}/.dotfilesrc" ]]; then
        grep -v "export DOTFILES_DEBUG=" "${HOME}/.dotfilesrc" > "${HOME}/.dotfilesrc.tmp" || true
        mv "${HOME}/.dotfilesrc.tmp" "${HOME}/.dotfilesrc"
      fi
      log_success "Debug mode disabled"
      ;;
    status)
      log_info "Debug Status Information"
      echo "  DOTFILES_DEBUG: ${DOTFILES_DEBUG:-0}"
      echo "  DOTFILES_LOG_LEVEL: ${DOTFILES_LOG_LEVEL:-INFO}"
      echo "  DOTFILES_LOG_FILE: ${DOTFILES_LOG_FILE:-Not set}"
      echo "  Debug mode: $([[ "${DOTFILES_DEBUG:-0}" == "1" ]] && echo "ENABLED" || echo "DISABLED")"
      ;;
    *)
      log_error "Invalid debug command: $action"
      echo "Available debug commands:"
      echo "  dotfiles debug on      # Enable debug mode"
      echo "  dotfiles debug off     # Disable debug mode"
      echo "  dotfiles debug status  # Show debug status"
      exit 1
      ;;
  esac
}

run_log_level() {
  local level="${1:-}"
  
  if [[ -z "$level" ]]; then
    log_info "Current log level: $DOTFILES_LOG_LEVEL"
    log_info "Available levels: DEBUG, INFO, WARN, ERROR"
    return 0
  fi
  
  case "${level^^}" in
    DEBUG|INFO|WARN|ERROR)
      export DOTFILES_LOG_LEVEL="${level^^}"
      # Update .dotfilesrc
      if [[ -f "${HOME}/.dotfilesrc" ]]; then
        grep -v "export DOTFILES_LOG_LEVEL=" "${HOME}/.dotfilesrc" > "${HOME}/.dotfilesrc.tmp" || true
        echo "export DOTFILES_LOG_LEVEL=${level^^}" >> "${HOME}/.dotfilesrc.tmp"
        mv "${HOME}/.dotfilesrc.tmp" "${HOME}/.dotfilesrc"
      fi
      log_success "Log level set to: ${level^^}"
      ;;
    *)
      log_error "Invalid log level: $level"
      log_info "Available levels: DEBUG, INFO, WARN, ERROR"
      exit 1
      ;;
  esac
}

# Show usage if no command is provided
if [ $# -eq 0 ]; then
  show_help
  exit 1
fi

# Check the command and run appropriate function
case "${1:-help}" in
  install)
    run_install "${2:-auto}"
    ;;
  config|stow)
    run_config
    ;;
  fonts)
    run_fonts
    ;;
  brew)
    run_brew
    ;;
  update)
    run_update
    ;;
  doctor)
    run_doctor
    ;;
  validate)
    run_validate
    ;;
  test)
    case "${2:-}" in
      dependencies|deps)
        run_test_deps
        ;;
      basic|simple)
        run_test_simple
        ;;
      *)
        echo "‚ùå Invalid test command: ${2:-}"
        echo ""
        echo "Available test commands:"
        echo "  dotfiles test dependencies  # Test dependency declarations in scripts"
        echo "  dotfiles test basic         # Simple dependency validation test"
        exit 1
        ;;
    esac
    ;;
  # Backward compatibility aliases
  test-deps)
    echo "‚ö†Ô∏è  Command 'test-deps' is deprecated. Use 'dotfiles test dependencies' instead."
    run_test_deps
    ;;
  test-simple)
    echo "‚ö†Ô∏è  Command 'test-simple' is deprecated. Use 'dotfiles test basic' instead."
    run_test_simple
    ;;
  clean)
    run_clean
    ;;
  # Logging commands
  logs)
    run_logs "${2:-show}"
    ;;
  debug)
    run_debug "${2:-status}"
    ;;
  log-level)
    run_log_level "${2:-}"
    ;;
  help|--help|-h)
    show_help
    ;;
  *)
    echo "‚ùå Invalid command: $1"
    echo ""
    show_help
    exit 1
    ;;
esac
