#!/usr/bin/env bash

set -e -o pipefail

# Get dotfiles directory
if [[ -f "${HOME}/.dotfilesrc" ]]; then
  source "${HOME}/.dotfilesrc"
else
  DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
fi

PROMPTS_DIR="${DOTFILES_DIR}/ai/prompts"
COMMANDS_DIR="${DOTFILES_DIR}/configs/cursor/.cursor/commands"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Show usage
show_usage() {
  echo "Usage: cursor-link [command] [prompt]"
  echo ""
  echo "Commands:"
  echo "  list           List all available prompts"
  echo "  linked         List currently linked prompts"
  echo "  link <prompt>  Link a prompt to Cursor commands"
  echo "  unlink <prompt>  Unlink a prompt from Cursor commands"
  echo "  link-all       Link all available prompts"
  echo "  unlink-all     Unlink all prompts"
  echo ""
  echo "Examples:"
  echo "  cursor-link list"
  echo "  cursor-link link code-review.md"
  echo "  cursor-link unlink plan.md"
}

# List all available prompts
list_prompts() {
  echo -e "${BLUE}Available prompts in ai/prompts/:${NC}"
  echo ""
  
  for prompt in "${PROMPTS_DIR}"/*.md; do
    if [[ -f "$prompt" ]]; then
      basename_prompt=$(basename "$prompt")
      
      # Skip README
      if [[ "$basename_prompt" == "README.md" ]]; then
        continue
      fi
      
      # Check if linked
      if [[ -L "${COMMANDS_DIR}/${basename_prompt}" ]]; then
        echo -e "  ${GREEN}✓${NC} ${basename_prompt}"
      else
        echo -e "  ${YELLOW}○${NC} ${basename_prompt}"
      fi
    fi
  done
  
  echo ""
  echo -e "${GREEN}✓${NC} = Linked  ${YELLOW}○${NC} = Not linked"
}

# List currently linked prompts
list_linked() {
  echo -e "${BLUE}Currently linked prompts:${NC}"
  echo ""
  
  local count=0
  for link in "${COMMANDS_DIR}"/*.md; do
    if [[ -L "$link" ]]; then
      basename_link=$(basename "$link")
      target=$(readlink "$link")
      echo -e "  ${GREEN}✓${NC} ${basename_link} → ${target}"
      ((count++))
    fi
  done
  
  if [[ $count -eq 0 ]]; then
    echo "  No prompts currently linked"
  fi
  
  echo ""
}

# Link a prompt
link_prompt() {
  local prompt_name="$1"
  
  if [[ -z "$prompt_name" ]]; then
    echo -e "${RED}Error: Please specify a prompt to link${NC}"
    echo "Example: cursor-link link code-review.md"
    exit 1
  fi
  
  # Add .md extension if not provided
  if [[ ! "$prompt_name" =~ \.md$ ]]; then
    prompt_name="${prompt_name}.md"
  fi
  
  local source_file="${PROMPTS_DIR}/${prompt_name}"
  local target_link="${COMMANDS_DIR}/${prompt_name}"
  
  # Check if source exists
  if [[ ! -f "$source_file" ]]; then
    echo -e "${RED}Error: Prompt '${prompt_name}' not found in ai/prompts/${NC}"
    exit 1
  fi
  
  # Skip README
  if [[ "$prompt_name" == "README.md" ]]; then
    echo -e "${YELLOW}Skipping README.md (not a prompt)${NC}"
    exit 0
  fi
  
  # Check if already linked
  if [[ -L "$target_link" ]]; then
    echo -e "${YELLOW}Already linked: ${prompt_name}${NC}"
    exit 0
  fi
  
  # Create the symlink (relative path: ../../../../ai/prompts/file.md)
  cd "${COMMANDS_DIR}" || exit 1
  ln -s "../../../../ai/prompts/${prompt_name}" "${prompt_name}"
  cd - > /dev/null || exit 1
  
  echo -e "${GREEN}✓${NC} Linked: ${prompt_name}"
}

# Unlink a prompt
unlink_prompt() {
  local prompt_name="$1"
  
  if [[ -z "$prompt_name" ]]; then
    echo -e "${RED}Error: Please specify a prompt to unlink${NC}"
    echo "Example: cursor-link unlink code-review.md"
    exit 1
  fi
  
  # Add .md extension if not provided
  if [[ ! "$prompt_name" =~ \.md$ ]]; then
    prompt_name="${prompt_name}.md"
  fi
  
  local target_link="${COMMANDS_DIR}/${prompt_name}"
  
  # Check if link exists
  if [[ ! -L "$target_link" ]]; then
    echo -e "${YELLOW}Not linked: ${prompt_name}${NC}"
    exit 0
  fi
  
  # Remove the symlink
  rm -f "$target_link"
  
  echo -e "${GREEN}✓${NC} Unlinked: ${prompt_name}"
}

# Link all prompts
link_all() {
  echo -e "${BLUE}Linking all prompts...${NC}"
  echo ""
  
  for prompt in "${PROMPTS_DIR}"/*.md; do
    if [[ -f "$prompt" ]]; then
      basename_prompt=$(basename "$prompt")
      
      # Skip README
      if [[ "$basename_prompt" == "README.md" ]]; then
        continue
      fi
      
      link_prompt "$basename_prompt"
    fi
  done
  
  echo ""
  echo -e "${GREEN}Done!${NC}"
}

# Unlink all prompts
unlink_all() {
  echo -e "${BLUE}Unlinking all prompts...${NC}"
  echo ""
  
  for link in "${COMMANDS_DIR}"/*.md; do
    if [[ -L "$link" ]]; then
      basename_link=$(basename "$link")
      unlink_prompt "$basename_link"
    fi
  done
  
  echo ""
  echo -e "${GREEN}Done!${NC}"
}

# Main command handler
if [[ $# -eq 0 ]]; then
  show_usage
  exit 1
fi

case "$1" in
  list)
    list_prompts
    ;;
  linked)
    list_linked
    ;;
  link)
    link_prompt "$2"
    ;;
  unlink)
    unlink_prompt "$2"
    ;;
  link-all)
    link_all
    ;;
  unlink-all)
    unlink_all
    ;;
  *)
    echo -e "${RED}Invalid command: $1${NC}"
    echo ""
    show_usage
    exit 1
    ;;
esac

