" Maintainer: Christopher Clarke
" LICENSE: MIT
" NOTE: This vimrc is *not* confured for non-Unix systems. Some things may not work on Windows
" CREDITS:
" Thanks to Doctorbh (github.com/doctorbh) for his great comment banner snippet.
" Thanks to Vimcasts.org for color group function.

" -------------------------------------------------------------------------
"                                Standards                                |
" -------------------------------------------------------------------------

set nocompatible " Does someone really use VI?
set shortmess=IAmx  " See :help shortmess to figure out all the stuff here

" Pathogen the amazing
call pathogen#infect('~/.vim/bundle')

" Syntax highlighting
syntax on
syntax enable " Both work

" Returns current current operating system
function! OpSys()
  if has("mac")
    return "mac"
  elseif has("unix")
    return "unix"
  elseif has("win32")
    return "win32"
  elseif has("windows")
    return "windows"
  endif
endfunc

" -------------------------------------------------------------------------
"                                Interface                                |
" -------------------------------------------------------------------------


"###########
"# General #
"###########

" Lines and columns
set number " Line numbers
set ruler  " Current column
set cursorline

" Wrap lines (must have for me)
set wrap
" TODO: set a wrapmargin so that wrapping begins after the colorcolumn.

set foldcolumn

set ambw=single " Width of different symbols (copyright symbols, euro symbol, Asian letters, etc.

" Encoding
set encoding=utf-8

" Searching
set ignorecase " Ignore casing conventions when searching
set smartcase
set hlsearch   " Highlight search so that I can actually see it

" Match brackets with nice highlight
set showmatch

" Colorcolumn for easy wrapping
set colorcolumn=85

" How many tenths of a second the cursor should blink
set mat=2

" No annoying bells!
set noerrorbells
set novisualbell


"##########################
"# Colorschemes and Fonts #
"##########################

" Standard colorschemes
if has("gui_running") 
  color molokai " Nice gui font
else
  color ir_black   " Best for command-line
endif
set guifont=Menlo:h14 " Menlo rocks

" Extra setup for Ubuntu which I sometimes run
if OpSys("unix")
  color ir_black
  set guifont=Monospace:h10
endif

" Set the ugly red color column on the side to a nicer color
hi ColorColumn guifg=#30312c guibg=#30312c


"###############
"# Indentation #
"###############

set expandtab    " Delete a tab one space at a time
set shiftwidth=2
set tabstop=2    " I like little tabs
set smarttab     " Name gives it away

set ai " Auto indentation rocks
set si " Smart indent


"###########
"# Windows #
"###########

set sb " Splitting a window will put the new window below the current one


"##########################
"# Backups and .swp Files #
"##########################

" Need I say more?
set noswapfile

" No backups, everything is plenty safe in git.
set nobackup
set nowb


" Enable filetype plugin
filetype on
filetype plugin on
filetype indent on



" -------------------------------------------------------------------------
"                                Mappings                                 |
" -------------------------------------------------------------------------

" Shift + A now moves to the end of the line WITHOUT going in insert mode
nnoremap A A<esc>

" Control + Q fills in :q automatically
nnoremap <C-Q> :q

" No up-down arrow keys allowed
noremap <up> <nop>
noremap <down> <nop>

" Sane window switching
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l



" -------------------------------------------------------------------------
"                              Autocommands                               |
" -------------------------------------------------------------------------

" Use Ruby highlighting for all of these
autocmd BufRead,BufNewFile {*.gemspec,Gemfile,Rakefile,Guardfile,Vagrantfile,Thorfile,config.ru}  set ft=ruby

" JSON and Javascript are the *same*
autocmd BufRead,BufNewFile *.json set ft=javascript




" -------------------------------------------------------------------------
"                              Abbreviations                              |
" -------------------------------------------------------------------------

" Automatically fill in edit
cabbrev e edit

" colo + <space> = colorscheme
cabbrev colo colorscheme

" Automatically fill w + <space> with write
cabbrev w write

" Automatically fill h with help
cabbrev h help

" Personal Info
iabbrev my_email beakr@ninjanizr.com
iabbrev my_name Christopher Clarke


" -------------------------------------------------------------------------
"                                 Plugins                                 |
" -------------------------------------------------------------------------

" NERDTree
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

" UltiSnips
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"
let g:UltiSnipsSnippetDirectories=["UltiSnips"]
let g:UltiSnipsEditSplit="vertical"
" search in regular order since the default was causing my
" 'clearsnippets' override on defaults not to work
let g:UltiSnipsDontReverseSearchPath="1"
" Get all TextMatey
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
" edit snip for current filetype
nnoremap <leader>u :UltiSnipsEdit<cr>



" -------------------------------------------------------------------------
"                            Helpful Functions                            |
" -------------------------------------------------------------------------

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Show syntax highlighting groups for word under cursor
" Author: Vimcasts.org
" Insanely nice for colorscheme builders like myself
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
