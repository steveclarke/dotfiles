set nocompatible     " it's the 21st century

let mapleader = ','  " use , instead of \. Load early.

" use Pathogen.vim to load vim bundles
call pathogen#infect('~/src/vim/bundles')

color ir_black     " default colorscheme
syntax on          " syntax highlighting

let g:my_name="Steve Clarke"
let g:my_email="steve@sevenseven.co"

set relativenumber " show how far away each line is from current one
set ruler          " show line and column # of cursor position
set cursorline     " hightlight the line we're on
set ttyfast        " assume fast terminal
set scrolloff=3    " min. # of lines above and below the cursor
set laststatus=2   " Status bar
set encoding=utf-8 " set encoding
set showcmd        " show (partial) command in the status line
set visualbell     " no annoying beep, please

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab      " convert tabs to spaces
set colorcolumn=85 " show a colored column to help with wrapping
set list listchars=tab:\ \ ,trail:Â·
set backspace=indent,eol,start  " backspace over everything in insert mode

" Searching
set hlsearch   " highlight search results
set incsearch  " incremental search
set ignorecase " case-insensitive search unless...
set smartcase  " if search contains caps, make case-sensitive
" use normal regex instead of Vim's
nnoremap / /\v
vnoremap / /\v
" clear highlighting
nnoremap <leader><space> :noh<cr>

" help save an <esc> key today
inoremap jj <esc>

" help save a <shift> key today
nnoremap ; :

" <leader>a to :Align
vnoremap <leader>a :Align<space>

" Re-hardwrap paragraphs of text
nnoremap <leader>q gqip

" Open new vsplit and switch to it
nnoremap <leader>v <C-w>v<C-w>l
nnoremap <leader>h <C-w>s<C-w>j

" Save buffer
nnoremap <leader>w <esc>:w<cr>

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Without setting this, ZoomWin restores windows in a way that causes
" equal always behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" NERDTree configuration
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>

" Command-T configuration
let g:CommandTMaxHeight=20

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" This stuff came along with Janus config. Leaving it here until
" I understand what it is and whether I want it. :D
" CTags
"map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
"map <C-\> :tnext<CR>

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function s:setupWrapping()
  set wrap
  set wrapmargin=2
  set textwidth=72
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Hammer<CR>
endfunction

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

au BufRead,BufNewFile *.txt call s:setupWrapping()

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration (see http://vimcasts.org/episodes/bubbling-text/)
" TODO: This mapping conflicts with default OS X mapping currently.
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" gist-vim defaults
if has("mac")
  let g:gist_clip_command = 'pbcopy'
elseif has("unix")
  let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

" Use modeline overrides
set modeline
set modelines=10

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" UltiSnips
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
let g:UltiSnipsSnippetsDir="~/.vim/snips"
let g:UltiSnipsEditSplit="vertical"
" edit snip for current filetype
nnoremap <leader>u :UltiSnipsEdit<cr>

" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif
